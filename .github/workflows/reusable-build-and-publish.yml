name: ♻️ Reusable - 🚀 Build/Publish/Tag/Version Docker Images
on:
  workflow_call:
    inputs:
      artifact_name:
        required: true
        type: string
      repository:
        required: true
        type: string
jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.read-paths.outputs.paths }}
    steps:
      - uses: actions/checkout@v4
        # Step to checkout the repository

      # Step to download the artifact specified by the input artifact_name
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: .

      # Step to read paths from the downloaded artifact and set as output
      - name: Read paths and set output
        id: read-paths
        run: |
          paths=$(cat dockerfile_paths.json)
          paths_serialized=$(echo $paths | jq -c .)
          echo "paths=${paths_serialized}" >> $GITHUB_OUTPUT
        shell: bash
        # This reads the dockerfile_paths.json file and sets the paths as an output

  build-and-push:
    runs-on: ubuntu-latest
    needs: download-artifact
    permissions: write-all
    strategy:
      matrix:
        folder: ${{ fromJson(needs.download-artifact.outputs.paths) }}
        # This creates a matrix of the folders containing Dockerfiles

    steps:
      - uses: actions/checkout@v4
        # Step to checkout the repository

      # Step to set the repository owner name in lowercase 
      - name: Set lower case owner name
        run: |
          echo "OWNER_LC=${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]' | awk -F "=" '{print "OWNER_LC="$2}' >> $GITHUB_ENV

      # Step to initialize the VERSION file if it doesn't exist
      - name: Initialize VERSION file if it doesn't exist
        run: |
          VERSION_FILE=${{ matrix.folder }}/VERSION
          if [ ! -f "$VERSION_FILE" ]; then
            echo "1.0-0.0" > $VERSION_FILE
          fi

      # Debug step to print matrix folder
      - name: Debug matrix folder
        run: | 
          echo "Matrix folder: ${{ matrix.folder }}"

      # Step to create a dynamic bumpversion configuration
      - name: Create dynamic bumpversion config
        run: |
          IMAGE_NAME=$(basename ${{ matrix.folder }})
          MATRIX_FOLDER="${{ matrix.folder }}"
          
          # Start creating the .bumpversion.toml file
          echo "[tool.bumpversion]" > .bumpversion.toml
          echo "current_version = \"$(cat ${MATRIX_FOLDER}/VERSION)\"" >> .bumpversion.toml
          echo "commit = false" >> .bumpversion.toml
          echo "tag = false" >> .bumpversion.toml
          echo "message = \"Bump version: {current_version} → {new_version}\"" >> .bumpversion.toml
          echo "search = \"{current_version}\"" >> .bumpversion.toml
          echo "replace = \"{new_version}\"" >> .bumpversion.toml
          echo "[tool.bumpversion.file]" >> .bumpversion.toml
          echo "file = \"${MATRIX_FOLDER}/VERSION\"" >> .bumpversion.toml

          # Handle special case for py-rocket-base
          if [ "$MATRIX_FOLDER" == "./images/py-rocket-base" ]; then
            echo "parse = '(?P<major>\\d+)\\.(?P<minor>\\d+)-(?P<patch>\\d+)\\.(?P<build>\\d+)'" >> .bumpversion.toml
            echo 'serialize = ["{major}.{minor}-{patch}.{build}"]' >> .bumpversion.toml
          else
            echo "parse = '(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)'" >> .bumpversion.toml
            echo "serialize = ['{major}.{minor}.{patch}']" >> .bumpversion.toml
          fi

          # Output the generated configuration for debugging
          echo "Generated bumpversion config:"
          cat .bumpversion.toml

        # Debug step to print bumpversion config
      - name: Debug bumpversion config
        run: cat .bumpversion.toml

      # Step to get the current version from the VERSION file
      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat ${{ matrix.folder }}/VERSION)
          echo "Current VERSION: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step to login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step to build and push the Docker image
      - name: Build and push Docker image
        continue-on-error: true
        run: |
          IMAGE_NAME=$(basename ${{ matrix.folder }})
          echo "Building and pushing $IMAGE_NAME"
          docker build ${{ matrix.folder }} -f ${{ matrix.folder }}/Dockerfile --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:latest --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ env.VERSION }} --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ github.sha }}
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:latest
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ env.VERSION }}
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ github.sha }}
        # This builds the Docker image and tags it with the latest version, current version, and commit SHA

      # Step to install bump-my-version
      - name: Install bump-my-version
        run: pip install bump-my-version

      # Step to bump the version number
      - name: Bump version
        run: |
          echo "Updating version in ${{ matrix.folder }}/VERSION"
          bump-my-version bump patch --config .bumpversion.toml
          NEW_VERSION=$(cat ${{ matrix.folder }}/VERSION)
          echo "New version is $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Debug step to print the new version
      - name: Debug new version
        run: |
          echo "New version set in VERSION file: $(cat ${{ matrix.folder }}/VERSION)"

      # Step to configure Git
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      # Step to pull the latest changes from the main branch
      - name: Pull latest changes
        run: git pull origin main

      # Step to commit and push the version bump changes
      - name: Commit and push changes
        run: |
          git add ${{ matrix.folder }}/VERSION
          git commit -m "Bump version for ${{ matrix.folder }} to ${{ env.NEW_VERSION }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}