name: ♻️ Reusable - 🚀 Build/Publish/Tag/Version Docker Images
on:
  workflow_call:
    inputs:
      artifact_name:
        required: true
        type: string
      repository:
        required: true
        type: string
jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      paths: ${{ steps.read-paths.outputs.paths }}
    steps:
      - uses: actions/checkout@v4
        # Step to checkout the repository

      # Step to download the artifact specified by the input artifact_name
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: .

      # Step to read paths from the downloaded artifact and set as output
      - name: Read paths and set output
        id: read-paths
        run: |
          paths=$(cat dockerfile_paths.json)
          paths_serialized=$(echo $paths | jq -c .)
          echo "paths=${paths_serialized}" >> $GITHUB_OUTPUT
        shell: bash
        # This reads the dockerfile_paths.json file and sets the paths as an output

  build-and-push:
    runs-on: ubuntu-latest
    needs: download-artifact
    permissions: write-all
    strategy:
      matrix:
        folder: ${{ fromJson(needs.download-artifact.outputs.paths) }}
        # This creates a matrix of the folders containing Dockerfiles

    steps:
      - uses: actions/checkout@v4
        # Step to checkout the repository
  
      # debug: Step to monitor disk space before cleanup
      - name: Check disk space before build
        run: df -h

      # Step to free up disk space manually
      #- name: Free disk space
      #  run: |
      #    sudo swapoff -a
      #    sudo rm -f /swapfile
      #    sudo apt clean
      #    docker rmi $(docker image ls -aq) || true

      # Step to free up disk space w/ GH action
      # - (NOTE: more spaceneeded for larger docker images)
      # - Github hosted runners usually have 20GB of space 
      # - BUT only guaranteed 14GB of free space 
      # - for both private & public repos github runners
      # - repo link: https://github.com/jlumbroso/free-disk-space
      # - Potential space savings of 31GB
      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed
          # if set to "true" frees up Tool cache: saves 5.9GiB
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for workflow
          # Android library: saves 14GiB
          android: true
          # .NET runtime: saves 2.7GiB
          dotnet: false
          # Haskell runtime: saves 0B
          haskell: false
          # Large misc. packages: saves 5.3GiB
          large-packages: false
          # Docker: Varies on Use by Action
          docker-images: false
          # Swap storage: saves 4.0GiB
          swap-storage: false      

      # debug: Step to monitor disk space before build after cleanup
      - name: Check disk space before build
        run: df -h

      # Step to set the repository owner name in lowercase 
      # notes: 
      # needed for docker and github container registry 
      # user/org and image names must be lower case 
      # see discussion for more details: https://github.com/orgs/community/discussions/27086
      - name: Set lower case owner name
        run: echo "OWNER_LC=${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]' | awk -F "=" '{print "OWNER_LC="$2}' >> $GITHUB_ENV

      # Step to initialize the VERSION file if it doesn't exist
      - name: Initialize VERSION file if it doesn't exist
        run: |
          VERSION_FILE=${{ matrix.folder }}/VERSION
          if [ ! -f "$VERSION_FILE" ]; then
            echo "1.0.0" > $VERSION_FILE
          fi
      # Debug step to print matrix folder
      #- name: Debug matrix folder
      #  run: | 
      #    echo "Matrix folder: ${{ matrix.folder }}"

      # Step to get the current version from the VERSION file
      - name: Get version
        id: get_version
        run: echo "VERSION=$(cat ${{ matrix.folder }}/VERSION)" >> $GITHUB_ENV

      # Step to login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Step to build and push the Docker image
      - name: Build and push Docker image
        continue-on-error: true
        run: |
          IMAGE_NAME=$(basename ${{ matrix.folder }})
          echo "Building and pushing $IMAGE_NAME"
          docker build ${{ matrix.folder }} -f ${{ matrix.folder }}/Dockerfile --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:latest --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ env.VERSION }} --tag ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ github.sha }}
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:latest
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ env.VERSION }}
          docker push ghcr.io/${OWNER_LC}/container-images/${IMAGE_NAME}:${{ github.sha }}
        # This builds the Docker image and tags it with the latest version, current version, and commit SHA 

      # debug: Step to monitor disk space after build
      - name: Check disk space after build
        run: df -h

      # Step to install bumpversion
      - name: Install bumpversion
        run: pip install bumpversion
  
      # Step to create a dynamic/temp bumpversion configuration
      - name: Create dynamic bumpversion config
        run: |
          echo "[bumpversion]" > .bumpversion_dynamic.cfg
          echo "commit = False" >> .bumpversion_dynamic.cfg
          echo "tag = False" >> .bumpversion_dynamic.cfg
          echo "[bumpversion:file:${{ matrix.folder }}/VERSION]" >> .bumpversion_dynamic.cfg
          echo "search = {current_version}" >> .bumpversion_dynamic.cfg
          echo "replace = {new_version}" >> .bumpversion_dynamic.cfg
  
      # Debug step to print bumpversion config
      #- name: Debug bumpversion config
      #  run: cat .bumpversion_dynamic.cfg

      # Step to bump the version number
      # Notes: 
      # 1.0.0 = {major}.{minor}.{patch}
      # example: 
      # use 'bumpversion major' to bump major version and 'bumpversion patch' version and so on
      # 1.0.0 will bump to 1.0.1  when using 'bumpversion patch'
      # more info:
      # for more complex version use updated branch: https://github.com/callowayproject/bump-my-version
      # and regular expression parse/serialize options
      - name: Bump version
        run: |
          echo "Updating version in ${{ matrix.folder }}/VERSION"
          bumpversion patch --current-version $(cat ${{ matrix.folder }}/VERSION) --allow-dirty --config-file .bumpversion_dynamic.cfg
          NEW_VERSION=$(cat ${{ matrix.folder }}/VERSION)
          echo "New version is $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step to configure Git
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      # Step to pull the latest changes from the main branch
      - name: Pull latest changes
        run: git pull origin main

      # Step to commit and push the version bump changes
      - name: Commit and push changes
        run: |
          git add ${{ matrix.folder }}/VERSION
          git commit -m "Bump version for ${{ matrix.folder }} to ${{ env.NEW_VERSION }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}